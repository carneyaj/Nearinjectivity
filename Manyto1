//This code determines the maximal N-to-1 behavior of all polynomials in Theorem 5.1, using the monodromy groups and ramification
//cycles generated by Nearinjectivity/VerifyMonodromy. Case names 101-117 are 1.1-1.17, 201-217 are 2.1-2.17, 4lm is X^l(X-1)^m, 
//and 600, 700, 800 are cases 6, 7, 8 of Theorem 5.1. Subroutines verifying that these cycle structures generate polynomials of 
//the correct types (independently verified by Nearinjectivity/VerifyMonodromy) are commented out to truncate the output but are
//functional.


// Magma 

for casename in [101..117] cat [201..217] cat [431,432,441,600,700,800] do

if casename eq 101 then
	"-- Case",casename,"--";
	Degf:=4; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2);  //ramification structure at each branch point
	b:=G!(1,3);
	c:=G!(1,4);
	d:=G!(1);
end if;

if casename eq 102 then
	"-- Case",casename,"--";
	Degf:=5; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3);  //ramification structure at each branch point
	b:=G!(3,4,5);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 103 then
	"-- Case",casename,"--";
	Degf:=5; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=5;
	G:=Sym(Deg);
	a:=G!(1,2,3);  //ramification structure at each branch point
	b:=G!(1,4)(1,5);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 104 then
	"-- Case",casename,"--";
	Degf:=5; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2)(3,4);  //ramification structure at each branch point
	b:=G!(1,3);
	c:=G!(1,5);
	d:=G!(1);
end if;

if casename eq 105 then
	"-- Case",casename,"--";
	Degf:=6; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3,4);  //ramification structure at each branch point
	b:=G!(1,5)(4,6);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 106 then
	"-- Case",casename,"--";
	Degf:=6; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2)(3,4,5);  //ramification structure at each branch point
	b:=G!(1,3)(1,6);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 107 then
	"-- Case",casename,"--";
	Degf:=7; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=3;
	G:=Sym(Deg);
	a:=G!(1,2)(3,4,5,6);  //ramification structure at each branch point
	b:=G!(1,3)(1,7);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 108 then
	"-- Case",casename,"--";
	Degf:=7; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3,4);  //ramification structure at each branch point
	b:=G!(1,5)(1,6)(1,7);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 109 then
	"-- Case",casename,"--";
	Degf:=7; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3)(4,5,6);  //ramification structure at each branch point
	b:=G!(1,2,3);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 110 then
	"-- Case",casename,"--";
	Degf:=7; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=3;
	G:=Sym(Deg);
	a:=G!(1,2,3)(4,5,6);  //ramification structure at each branch point
	b:=G!(1,2)(3,4);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 111 then
	"-- Case",casename,"--";
	Degf:=7; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2)(3,4)(5,6,7);  //ramification structure at each branch point
	b:=G!(1,2)(3,4);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 112 then
	"-- Case",casename,"--";
	Degf:=7; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2)(3,4,5);  //ramification structure at each branch point
	b:=G!(1,2)(3,4)(5,6);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 113 then
	"-- Case",casename,"--";
	Degf:=8; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2)(3,4,5)(6,7,8);  //ramification structure at each branch point
	b:=G!(1,2)(3,4);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 114 then
	"-- Case",casename,"--";
	Degf:=8; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3)(4,5,6);  //ramification structure at each branch point
	b:=G!(1,2)(3,4)(5,6);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 115 then
	"-- Case",casename,"--";
	Degf:=9; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3,4)(5,6,7,8);  //ramification structure at each branch point
	b:=G!(1,2)(3,4);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 116 then
	"-- Case",casename,"--";
	Degf:=9; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3)(4,5,6);  //ramification structure at each branch point
	b:=G!(1,2)(3,4)(5,6)(7,8);
	c:=G!(1);
	d:=G!(1);
end if;

if casename eq 117 then
	"-- Case",casename,"--";
	Degf:=10; //Degree of f^n
	cyclicdeg:=1; //n
	Deg:=Degf*cyclicdeg; //Degree of f^n
	maxroots:=2;
	G:=Sym(Deg);
	a:=G!(1,2,3)(4,5,6)(7,8,9);  //ramification structure at each branch point
	b:=G!(1,2)(3,4)(5,6);
	c:=G!(1);
	d:=G!(1);
end if;



        if casename eq 201 then
		"-- Case",casename,"--";
		Degf:=3; //Degree of f
		cyclicdeg:=3; //n
		Deg:=Degf*cyclicdeg; //Degree of f^n
		maxroots:=6;
		G:=Sym(Deg);
		a:=G!(1,4,7)(2,5,8)(3,6,9);  
		b:=G!(1,2,3);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 202 then
		"-- Case",casename,"--";
		Degf:=3; //Degree of f
		cyclicdeg:=4;
		maxroots:=4;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,4,7,10)(2,5,8,11)(3,6,9,12);  
		b:=G!(1,2)(4,6);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 203 then
		"-- Case",casename,"--";
		Degf:=3; //Degree of f
		cyclicdeg:=4; 
		maxroots:=3;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,4,7,10)(2,5,8,11)(3,6,9,12);  
		b:=G!(1,2);
		c:=G!(1,3);
		d:=G!(1);
	end if;

        if casename eq 204 then
		"-- Case",casename,"--";
		Degf:=4; //Degree of f
		cyclicdeg:=2; 
		maxroots:=4;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,5)(2,6)(3,7)(4,8);  
		b:=G!(1,2,3)(5,8);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 205 then
		"-- Case",casename,"--";
		Degf:=4; //Degree of f
		cyclicdeg:=4; 
		maxroots:=6;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		monord:=3; //#Mon(f)
		G:=Sym(Deg);
		a:=G!(1,5,9,13)(2,6,10,14)(3,7,11,15)(4,8,12,16);  
		b:=G!(1,2)(3,4)(5,7);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 206 then
		"-- Case",casename,"--";
		Degf:=4; //Degree of f
		cyclicdeg:=2; 
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,6,2,5)(3,7)(4,8);  
		b:=G!(1,3)(5,8);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 207 then
		"-- Case",casename,"--";
		Degf:=4; //Degree of f
		cyclicdeg:=3; 
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,5,9)(2,6,10)(3,7,11)(4,8,12);  
		b:=G!(1,2)(6,7)(9,12);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 208 then    
                "-- Case",casename,"--";   
                Degf:=4; //Degree of f
		cyclicdeg:=4; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,5,9,13,2,6,10,14)(3,7,11,15)(4,8,12,16); 
		b:=G!(1,3)(5,8);
		c:=G!(1);
		d:=G!(1);
        end if;

        if casename eq 209 then       
                "-- Case",casename,"--";
                Degf:=4; //Degree of f
		cyclicdeg:=2; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,5)(2,6)(3,7)(4,8); 
		b:=G!(1,2)(5,7);
		c:=G!(1,4);
		d:=G!(1);
        end if;

        if casename eq 210 then       
                "-- Case",casename,"--";
                Degf:=4; //Degree of f
		cyclicdeg:=4; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,5,9,13)(2,6,10,14)(3,7,11,15)(4,8,12,16); 
		b:=G!(1,2)(5,7)(9,12);
		c:=G!(1);
		d:=G!(1);
        end if;

        if casename eq 211 then       
                "-- Case",casename,"--";
                Degf:=5; //Degree of f
		cyclicdeg:=2; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,6,2,7,3,8)(4,9)(5,10); 
		b:=G!(1,4)(6,10);
		c:=G!(1);
		d:=G!(1);
        end if;

        if casename eq 212 then       
                "-- Case",casename,"--";
                Degf:=5; //Degree of f
		cyclicdeg:=2; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,7,2,6)(3,9,4,8)(5,10); 
		b:=G!(1,3)(9,10);
		c:=G!(1);
		d:=G!(1);
        end if;

        if casename eq 213 then       
                "-- Case",casename,"--";
                Degf:=5; //Degree of f
		cyclicdeg:=4; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,6,11,16,2,7,12,17)(3,8,13,18,4,9,14,19)(5,10,15,20); 
		b:=G!(1,3)(6,10);
		c:=G!(1);
		d:=G!(1);
        end if;

	 if casename eq 214 then       
                "-- Case",casename,"--";
                Degf:=5; //Degree of f
		cyclicdeg:=2; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,6,2,7)(3,8)(4,9)(5,10); 
		b:=G!(1,3)(4,5)(6,10);
		c:=G!(1);
		d:=G!(1);
        end if;

	 if casename eq 215 then       
                "-- Case",casename,"--";
                Degf:=5; //Degree of f
		cyclicdeg:=3; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,6,11)(2,7,12)(3,8,13)(4,9,14)(5,10,15); 
		b:=G!(1,2)(3,4)(6,8)(11,15);
		c:=G!(1);
		d:=G!(1);
        end if;

	 if casename eq 216 then       
                "-- Case",casename,"--";
                Degf:=6; //Degree of f
		cyclicdeg:=2; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,7,2,8)(3,9)(4,10)(5,11)(6,12); 
		b:=G!(1,3)(4,5)(7,10)(11,12);
		c:=G!(1);
		d:=G!(1);
        end if;

	 if casename eq 217 then       
                "-- Case",casename,"--";
                Degf:=7; //Degree of f
		cyclicdeg:=2; //n
		maxroots:=2;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,8,2,9,3,10)(4,11,5,12,6,13)(7,14); 
		b:=G!(1,4)(8,14);
		c:=G!(1);
		d:=G!(1);
        end if;

        if casename eq 431 then
		"-- Case",casename,"--";
		Degf:=4; //Degree of f
		cyclicdeg:=1; //n
		Deg:=Degf*cyclicdeg; //Degree of f^n
		maxroots:=2;
		G:=Sym(Deg);
		a:=G!(1,2,3);  
		b:=G!(1,4);
		c:=G!(1);
		d:=G!(1);
	end if;


        if casename eq 432 then
		"-- Case",casename,"--";
		Degf:=5; //Degree of f
		cyclicdeg:=1; //n
		Deg:=Degf*cyclicdeg; //Degree of f^n
		maxroots:=2;
		G:=Sym(Deg);
		a:=G!(1,2,3)(4,5);  
		b:=G!(1,4);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 441 then
		"-- Case",casename,"--";
		Degf:=5; //Degree of f
		cyclicdeg:=1; //n
		Deg:=Degf*cyclicdeg; //Degree of f^n
		maxroots:=2;
		G:=Sym(Deg);
		a:=G!(1,2,3,4);  
		b:=G!(1,5);
		c:=G!(1);
		d:=G!(1);
	end if;

  

        if casename eq 600 then
		"-- Case",casename,"--";
		Degf:=4; //Degree of f
		cyclicdeg:=3; 
		maxroots:=6;
		Deg:=Degf*cyclicdeg; //Degree of f^n
		G:=Sym(Deg);
		a:=G!(1,5,9)(2,6,10)(3,7,11)(4,8,12);  
		b:=G!(1,2)(5,7)(9,12);
		c:=G!(1);
		d:=G!(1);
	end if;

        if casename eq 700 then       
                "-- Case",casename,"--";
                Degf:=5; //Degree of f
		cyclicdeg:=2; //n
		Deg:=Degf*cyclicdeg; //Degree of f^n
		monord:=120; //#Mon(f)
		maxroots:=6;
		G:=Sym(Deg);
		a:=G!(1,6,2,7,3,8)(4,9)(5,10);  
		b:=G!(1,4,5);
		c:=G!(1);
		d:=G!(1);
        end if;

        if casename eq 800 then       
                "-- Case",casename,"--";
                Degf:=5; //Degree of f
		cyclicdeg:=2; //n
		Deg:=Degf*cyclicdeg; //Degree of f^n
		monord:=120; //#Mon(f)
		maxroots:=6;
		G:=Sym(Deg);
		a:=G!(1,7,2,6)(3,9,4,8)(5,10);  
		b:=G!(1,5)(8,10);
		c:=G!(1);
		d:=G!(1);
        end if;




e:=a*b*c*d; 
	if #Orbits(sub<G|e>) eq 1 then H:=sub<G|a,b,c,d>; 
		fMonodromy:=sub<H|{Stabilizer(H,[n]):n in {1..Deg}}>;
		fStab:=Stabilizer(H,[1..Degf]);
                	//#H,#fMonodromy,#fStab;
		I:=sub<H|a>;
		if #I/#(I meet fMonodromy) eq cyclicdeg then
				
			"#Mon(f^n) =",#H,"#Mon(f) =",#fMonodromy/#fStab,"Order of cyclic =",#H/#fMonodromy;
				
			I2:=sub<H|b>;
			I3:=sub<H|c>;
			I4:=sub<H|d>;
//RamT:=Transversal(H,fMonodromy);
//I2setmon:={I2^(i^(-1)) meet fMonodromy: i in RamT};


// Use Riemann Hurwitz to find the genus of the splitting field of f(X)-t
			gOmega:=(#H)*(-2 + 1-1/#I + 1-1/#I2+1-1/#I3+1-1/#I4 + 1-1/
			Degree(G))/2 + 1;
// Generate all possible roots-point stabilizers
			rootsolns:=-1;
			roots:=1;
			while rootsolns ne 0 do
				roots:=roots+1;
				rootsolns:=0; 
				//roots,"- to - 1 solutions";
				for ZZ in Subsets({1..Deg},roots) do
					J:=Stabilizer(H,SetToSequence(ZZ));
					Jnorm:=Normalizer(H,J);
					Trans:=Transversal(H,Jnorm);
//use Riemann-Hurwitz between the fixed field of the stabilizer 
//and the splitting field to find the genus.
					gOmegaJ:=(2*gOmega-2 - #Jnorm/#I*
					&+[#(I^(i^(-1)) meet J) - 1:i in Trans]
 					 - #Jnorm/#I2*&+[#(I2^(i^(-1)) meet J) - 1:i in Trans] - #Jnorm/
					#I3*&+[#(I3^(i^(-1)) meet J) - 1:i in Trans] - #Jnorm/#I4*&+[#(I4^(i^(-1)) meet J) - 1:i in Trans])/(2*#J) + 1;
					if gOmegaJ le 1 then 
						//"genus of Omega^J is",gOmegaJ;
if roots eq maxroots then
twoptdegs:={};
//for ZZZZ in Subsets(ZZ,2) do
//    ZZZ:=SetToSequence(ZZZZ);
//    J:=Stabilizer(H,ZZZ);
//					Jnorm:=Normalizer(H,J);
//					Trans:=Transversal(H,Jnorm);
//					gOmegaJ:=(2*gOmega-2 - #Jnorm/#I*
//					&+[#(I^(i^(-1)) meet J) - 1:i in Trans]
// 					 - #Jnorm/#I2*&+[#(I2^(i^(-1)) meet J) - 1:i in Trans] - #Jnorm/
//					#I3*&+[#(I3^(i^(-1)) meet J) - 1:i in Trans] - #Jnorm/#I4*&+
//[#(I4^(i^(-1)) meet J) - 1:i in Trans])/(2*#J) + 1;
//deg2:=#H/(#J*Deg);
//twoptdegs:=twoptdegs join {[gOmegaJ,deg2]};
//end for;
//"genera,","degrees";
//twoptdegs;
end if;

						//for inertia in I2setmon do
//#I2/#inertia;
//							for z in ZZ do
//							eltStab:=Stabilizer(H,[z]);
//							RamTup:=Transversal(fMonodromy,eltStab);

//I2setstab:={inertia^(i^(-1)) meet eltStab: i in RamTup};
//"z =",z,[#inertia/#inertiaup:inertiaup in I2setstab];
//end for;
//end for;
//"genera of 2 root fields";



						rootsolns:=rootsolns+1;
					end if;
				end for;
				if rootsolns eq 0 then
					"N(f^",cyclicdeg,") =",roots-1;
				end if;
			end while;
		end if;
	end if;
end for;
